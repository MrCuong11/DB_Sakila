-- Level 1:
-- Write a SQL query to return the first and last names of all actors in the database.
select first_name, last_name 
from actor;

-- Write a SQL query to return the titles of all films in the database, along with their rental rates and replacement costs.
select title, rental_rate, replacement_cost
from film;


-- Write a SQL query to return the top 5 most rented films in the database, along with the number of times they have been rented.
-- Từ film_id → tìm tất cả inventory_id tương ứng
-- Rồi đếm tất cả rental_id ứng với các inventory_id đó
-- groupBy giúp gom lượt thuê lại theo title 
SELECT f.title, COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.title
ORDER BY rental_count DESC
LIMIT 5;



-- Write a SQL query to return the average rental duration for each category of film in the database.
-- Lấy category name rồi lấy các bộ phim từ category đó; mỗi phim lấy giá trị rental_duration rồi tính giá trị trung bình rồi sắp xếp giảm
SELECT c.name AS category_name, AVG(f.rental_duration) AS avg_rental_duration
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN film f ON fc.film_id = f.film_id
GROUP BY c.name
ORDER BY avg_rental_duration DESC;





-- Write a SQL query to return the names and addresses of all customers who have rented a film in the month of January 2022.
-- join với rental bằng customer_id để xem rental_date
-- join với address để lấy địa chỉ
SELECT
    c.first_name,
    c.last_name,
    a.address
FROM
    customer c
JOIN address a ON c.address_id = a.address_id
JOIN rental r ON c.customer_id = r.customer_id
WHERE
    r.rental_date >= '2022-01-01'
    AND r.rental_date < '2022-02-01'
GROUP BY
    c.customer_id, c.first_name, c.last_name, a.address;



-- Write a SQL query to return the revenue generated by each store in the database for the year 2021.
-- từ bảng payment, get ra amount và get ra customer_id tương ứng, join với customer để biết customer đó thuộc cửa hàng nào, rồi join với store

SELECT
    s.store_id,
    SUM(p.amount) AS total_revenue
FROM
    payment p
JOIN customer c ON p.customer_id = c.customer_id
JOIN store s ON c.store_id = s.store_id
WHERE
    p.payment_date >= '2021-01-01'
    AND p.payment_date < '2022-01-01'
GROUP BY
    s.store_id;



-- Write a SQL query to return the names of all actors who have appeared in more than 20 films in the database.
-- từ bảng actor join sang bảng film_actor để biết actor đóng bao nhiêu film 
-- group by loại bỏ các dòng trùng nhau
-- having > 20 để lấy actor đóng > 20 film
SELECT
    a.first_name,
    a.last_name,
    COUNT(fa.film_id) AS film_count
FROM
    actor a
JOIN
    film_actor fa ON a.actor_id = fa.actor_id
GROUP BY
    a.actor_id, a.first_name, a.last_name
HAVING
    COUNT(fa.film_id) > 20 
ORDER BY
    film_count desc;




-- Write a SQL query to return the titles of all films in the database that have a rating of 'PG-13' and a length of more than 120 minutes.

SELECT 
    title, 
    rating, 
    length
FROM 
    film
WHERE 
    rating = 'PG-13'
    AND length > 120;











-- level 2
-- Write a SQL query to return the top 10 customers who have generated the most revenue for the store, including their names and total revenue generated.
-- group by customer_id để tránh trường hợp 2 người trùng tên và sql hiểu nhầm để group 
SELECT 
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_revenue
FROM 
    customer c
JOIN 
    payment p ON c.customer_id = p.customer_id
GROUP BY 
    c.customer_id, c.first_name, c.last_name
ORDER BY 
    total_revenue DESC
LIMIT 10;





-- Write a SQL query to return the names and contact information of all customers who have rented films in all categories in the database.
-- join từ bảng customer với rental để lấy các lượt thuê của khách hàng
-- join từ bảng rental với inventory để biết lươt thuê đó thuộc phim nào
-- join từ inventory với film_category để biết phim đó thuộc thể loại nào (vì inventory có film_id và film_category cũng có film_id)
-- giữ lại khách hàng có cate khác nhau = tổng cate_id trong category
SELECT
    c.first_name,
    c.last_name, 
    c.email
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film_category fc ON i.film_id = fc.film_id
GROUP BY c.customer_id, c.first_name, c.last_name, c.email
HAVING 
	(COUNT(DISTINCT fc.category_id)) = (SELECT COUNT(*) FROM category);




-- Write a SQL query to return the titles of all films in the database that have been rented at least once but never returned.
-- muốn lấy được return_date phải join qua bảng inventory và rental (return date nằm ở bảng rental)
SELECT DISTINCT f.title
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
WHERE r.return_date IS NULL;




-- Write a SQL query to return the names of all actors who have appeared in at least one film in each category in the database.
-- gần giống bài trước 
SELECT 
    a.first_name, 
    a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film_category fc ON fa.film_id = fc.film_id
GROUP BY a.actor_id, a.first_name, a.last_name
HAVING COUNT(DISTINCT fc.category_id) = (SELECT COUNT(*) FROM category);






-- Write a SQL query to return the names of all customers who have rented the same film more than once in a single transaction, along with the number of times they rented it.
-- group by thêm customer_id, film_id để tránh trùng nhau, còn các trường khác đương nhiên phải group by rồi 
SELECT 
    c.first_name, 
    c.last_name, 
    f.title, 
    COUNT(*) AS rental_count
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
GROUP BY c.customer_id, f.film_id, f.title, c.first_name, c.last_name
HAVING COUNT(*) > 1;







-- Write a SQL query to return the total revenue generated by each actor in the database, based on the rental fees of the films they have appeared in.
-- join actor -> film actor: tìm kiếm actor đóng phim nào
-- join film actor -> film: lấy thông tin film 
-- join film -> inventory: lấy những bản sao của film 
-- inventory -> rental: lấy lươt thuê của bản sao đó
-- rental -> payment: tìm amount khách hàng trả

SELECT
    a.first_name,
    a.last_name,
    SUM(p.amount) AS total_revenue
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
GROUP BY a.actor_id, a.first_name, a.last_name
ORDER BY total_revenue DESC;










-- Write a SQL query to return the names of all actors who have appeared in at least one film with a rating of 'R', but have never appeared in a film with a rating of 'G'.
-- ý tưởng chính: tìm diễn viên có đóng phim hạng R; rồi tìm diễn viên đong phim hạng G
-- -> R not in G
SELECT DISTINCT a.first_name, a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE f.rating = 'R'
  AND a.actor_id NOT IN (
    SELECT a2.actor_id
    FROM actor a2
    JOIN film_actor fa2 ON a2.actor_id = fa2.actor_id
    JOIN film f2 ON fa2.film_id = f2.film_id
    WHERE f2.rating = 'G'
  );



-- Write a SQL query to return the titles of all films in the database that have been rented by more than 50 customers, but have never been rented by the same customer more than once.
-- HAVING COUNT(*) > 1 tức là trả về những phim được thuê nhiều hơn 1 lần, not in sẽ loại trường hợp đó
SELECT f.title
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY f.film_id, f.title
HAVING COUNT(DISTINCT r.customer_id) > 50
   AND f.film_id NOT IN (
       SELECT i2.film_id
       FROM inventory i2
       JOIN rental r2 ON i2.inventory_id = r2.inventory_id
       GROUP BY i2.film_id, r2.customer_id
       HAVING COUNT(*) > 1
   );











-- Write a SQL query to return the names of all customers who have rented a film from a category they have never rented from before.
-- Nếu câu truy vấn con có kết quả
-- → Có nghĩa là đã từng thuê thể loại đó trước đây rồi
-- → NOT EXISTS không cho dòng đó vào kết quả.
-- VÀ NGƯỢC LẠI

-- select 1 kiểm tra xem có dòng nào thỏa mãn không, chứ không cần trả ra dữ liệu
-- mặc dù nó sẽ trả ra là 1 nhưng sẽ check được điều kiện trong not exists đúng không
SELECT DISTINCT 
    c.customer_id,
    c.first_name,
    c.last_name,
    cat.name AS category_name
FROM customer c
JOIN rental r1 ON c.customer_id = r1.customer_id
JOIN inventory i1 ON r1.inventory_id = i1.inventory_id
JOIN film_category fc1 ON i1.film_id = fc1.film_id
JOIN category cat ON fc1.category_id = cat.category_id
WHERE NOT EXISTS (
    SELECT 1
    FROM rental r2
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
    JOIN film_category fc2 ON i2.film_id = fc2.film_id
    WHERE r2.customer_id = c.customer_id
      AND fc2.category_id = fc1.category_id
      AND r2.rental_date < r1.rental_date
);















-- Write a SQL query to return the titles of all films in the database that have been rented by every customer who has ever rented a film from the 'Action' category.
-- Tập A – Những khách hàng từng thuê phim thể loại "Action"
-- Tập B – Những phim được tất cả khách hàng trong Tập A thuê
-- Với mỗi film, kiểm tra xem có đủ số lượng khách hàng trong Tập A đã từng thuê phim đó không.

-- (having conditions: Tính tổng số khách đã từng thuê phim "Action" (tức là size của tập A).
-- Với từng phim, nếu số lượng khách đã thuê nó bằng số trong tập A → thì đó là phim mọi người trong tập A đều đã thuê.)
-- tìm film và lượng khách hàng thuê
SELECT f.title
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id
WHERE r.customer_id IN (
    -- Đây là tập A: tất cả khách thuê phim Action
    SELECT DISTINCT r2.customer_id
    FROM rental r2
    JOIN inventory i2 ON r2.inventory_id = i2.inventory_id
    JOIN film_category fc2 ON i2.film_id = fc2.film_id
    JOIN category cat ON fc2.category_id = cat.category_id
    WHERE cat.name = 'Action'
)
GROUP BY f.film_id, f.title
HAVING COUNT(DISTINCT r.customer_id) = (
    -- Số lượng khách đã từng thuê phim Action
    SELECT COUNT(DISTINCT r3.customer_id)
    FROM rental r3
    JOIN inventory i3 ON r3.inventory_id = i3.inventory_id
    JOIN film_category fc3 ON i3.film_id = fc3.film_id
    JOIN category cat2 ON fc3.category_id = cat2.category_id
    WHERE cat2.name = 'Action'
);














